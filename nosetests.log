check if rpmfluff can add files to built RPMs ... ok
check if rpmfluff is working ... ok
check that the dd utilities exist ... ok
dd_extract: files are extracted correctly ... ok
dd_extract: using --binaries extracts only /bin, /sbin, etc. ... ok
dd_extract: files get correct mode (#1222056) ... ok
dd_extract: using --firmwares extracts only /lib/firmware ... ok
dd_extract: using --libraries extracts only /lib etc. ... ok
dd_extract: using --modules extracts only .ko files ... ok
dd_list: check output format ... ok
dd_list: ignore installer-enhancements if version doesn't match ... ok
dd_list: 'Provides:installer-enhancement' implies bins/libs ... ok
dd_list: missing directory returns no results ... ok
dd_list: multiple outputs for multiple packages ... ok
dd_list: empty directory returns no results ... ok
dd_list: ignore kmods if our kernel is too old ... ok
dd_list: accept kmods for z-stream kernels (#1207831) ... ok
bootloader_test (tests.dracut_tests.parse-kickstart_test.ParseKickstartTestCase) ... ok
cdrom_test (tests.dracut_tests.parse-kickstart_test.ParseKickstartTestCase) ... ok
displaymode_test (tests.dracut_tests.parse-kickstart_test.ParseKickstartTestCase) ... ok
displaymode_test_2 (tests.dracut_tests.parse-kickstart_test.ParseKickstartTestCase) ... ok
displaymode_test_3 (tests.dracut_tests.parse-kickstart_test.ParseKickstartTestCase) ... ok
driverdisk_test (tests.dracut_tests.parse-kickstart_test.ParseKickstartTestCase) ... ok
driverdisk_test_2 (tests.dracut_tests.parse-kickstart_test.ParseKickstartTestCase) ... ok
harddrive_test (tests.dracut_tests.parse-kickstart_test.ParseKickstartTestCase) ... ok
mediacheck_test (tests.dracut_tests.parse-kickstart_test.ParseKickstartTestCase) ... ok
network_bond_test (tests.dracut_tests.parse-kickstart_test.ParseKickstartTestCase) ... ok
network_bridge_test (tests.dracut_tests.parse-kickstart_test.ParseKickstartTestCase) ... ok
network_ipv6_only_test (tests.dracut_tests.parse-kickstart_test.ParseKickstartTestCase) ... ok
network_static_test (tests.dracut_tests.parse-kickstart_test.ParseKickstartTestCase) ... ok
network_team_test (tests.dracut_tests.parse-kickstart_test.ParseKickstartTestCase) ... ok
network_test (tests.dracut_tests.parse-kickstart_test.ParseKickstartTestCase) ... ok
network_test_2 (tests.dracut_tests.parse-kickstart_test.ParseKickstartTestCase) ... ok
network_vlanid_test (tests.dracut_tests.parse-kickstart_test.ParseKickstartTestCase) ... ok
nfs_test (tests.dracut_tests.parse-kickstart_test.ParseKickstartTestCase) ... ok
nfs_test_2 (tests.dracut_tests.parse-kickstart_test.ParseKickstartTestCase) ... ok
updates_test (tests.dracut_tests.parse-kickstart_test.ParseKickstartTestCase) ... ok
url_test (tests.dracut_tests.parse-kickstart_test.ParseKickstartTestCase) ... ok
dd_extract: call binary with expected arguments ... ok
dd_list: returns a list of Driver objects parsed from output ... ok
get_deviceinfo: parses DeviceInfo from blkid etc. ... ok
test_shortdev (tests.dracut_tests.test_driver_updates.DeviceInfoTestCase) ... ok
device_menu: choosing a number returns that Device ... ok
device_menu: 'c' exits the menu ... ok
device_menu: 'r' makes the menu refresh ... ok
extract_drivers: save repo, write pkglist ... ok
extract_drivers: extract selected drivers, don't save enhancements ... ok
extract_drivers(repos=[...]) extracts all drivers from named repos ... ok
all_finished: True if all lines from dd_todo are in dd_finished ... ok
all_finished: True if dd_finished has more items than dd_todo ... ok
finish: mark request finished, and write dd.done if all complete ... ok
mark_finished: appends a line to /tmp/dd_finished ... ok
grab_driver_files: copy drivers into place, return module list ... ok
load_drivers: runs depmod and modprobes all named modules ... ok
mount: calls mount(8) to mount a device/image ... ok
mount: makes mountpoint if needed ... ok
mounted: context manager mounts/umounts as expected ... ok
umount: calls umount(8) ... ok
process_driver_disk: mount disk, extract RPMs, grab + load drivers ... ok
process_driver_disk: don't run depmod etc. if no new drivers ... ok
process_driver_disk: recursively process .isos at toplevel ... ok
process_driver_rpm: extract RPM, grab + load driver ... ok
check test helpers ... ok
append_line: adds a line to the end of an existing file ... ok
append_line: create file + append \n when needed ... ok
copy_file: copy files into destdir, leaving existing contents ... ok
copy_file: skip files in subdirs of destdir ... ok
copy_file: overwrite files in destdir if they have the same name ... ok
copy_file: skip files already in destdir ... ok
find_repos: return RPM dir if a valid repo is found ... ok
find_repos: descend multiple subdirs if needed ... ok
iter_files: iterates over full paths to files under topdir ... ok
iter_files: match filename against glob pattern ... ok
mkdir_seq: first dir ends with 1 ... ok
mkdir_seq: increment number if file exists ... ok
move_files: move files to destdir ... ok
move_files: leave files alone if they're in a subdir of destdir ... ok
move_files: overwrite files with the same name ... ok
move_files: leave files alone if they're already in destdir ... ok
read_lines: return [] for empty file ... ok
read_lines: return [] for missing file ... ok
read_lines: returns items as passed to append_line ... ok
read_lines: returns a list of lines without trailing newlines ... ok
save_repo: copies a directory to /run/install/DD-X ... ok
dirinstall_test (tests.pyanaconda_tests.argparse_test.ArgparseTest) ... ok
display_mode_test (tests.pyanaconda_tests.argparse_test.ArgparseTest) ... ok
selinux_test (tests.pyanaconda_tests.argparse_test.ArgparseTest) ... ok
Test the DataHolder class ... ok
Test installing GRUB to a MBR stage1 and btrfs RAID stage2 ... ok
Test installing GRUB to a MBR stage1 and partition stage2 ... ok
Test installing GRUB to a MBR stage1 and RAID1 stage2 ... ok
Test installing GRUB to a partition stage1 and MBR stage2 ... ok
Test installing GRUB to a partition stage1 and partition stage2 ... ok
Test installing GRUB to a partition stage1 and MBR stage2 ... ok
Test cmp_obj_attrs. ... ok
Test get_active_console. ... ok
Test getdeepattr. ... ok
Test the getDirSize. ... ok
Test have_word_match. ... ok
Test isConsoleOnVirtualTerminal. ... ok
Test lowerASCII. ... ok
Test mkdirChain. ... ok
Test the open_with_perm function ... ok
Test the parent_dir function ... ok
Test parseNfsUrl. ... ok
Test setdeepattr. ... ok
Test strip_accents. ... ok
Test _toASCII. ... ok
Test upperASCII. ... ok
Test vtActivate. ... ok
Test execReadlines with reading only part of the output ... ok
Test execReadlines. ... ok
Test execReadlines in different child exit situations. ... ok
Test execReadlines and filter_stderr. ... ok
Test the output of execReadlines. ... ok
Test execReadlines and signal receipt. ... ok
Test execWithCapture with no output ... ok
Test execWithCapture with no stderr ... ok
Test execWithCapture. ... ok
Test execWithRedirect. ... ok
Test _run_program with binary output. ... ok
Test the _run_program method. ... ok
Test passing preexec_fn to startProgram. ... ok
Test the reset_handlers parameter of startProgram. ... ok
Test redirecting stdout with startProgram. ... ok
Test watchProcess ... ok
Upcasing first letter should work as expected. ... ok
Should correctly join keyboard layout and variant to a string spec. ... ok
Normalizing layout and variant strings should work as expected. ... ok
Parsing and joining valid layout and variant spec should have no effect. ... ok
Should correctly parse keyboard layout and variant string specs. ... ok
Test that anaconda uses the right versions of kickstart commands ... ok
Test that anaconda uses the right versions of kickstart data ... ok
Test that anaconda uses the right versions of kickstart commands ... ok
Test if ANACONDA_WIDGETS_DATA is used if specified. ... ok
Finding best locale matches should work as expected. ... ok
Langcode-locale matching should work as expected. ... ok
All locales' date formats should be properly resolved. ... ok
Should return None for invalid langcodes. ... ok
Should correctly parse valid langcodes. ... ok
dracutBootArguments_s390_test (tests.pyanaconda_tests.network_test.NetworkIfcfgTests) ... ok
dracutBootArguments_test (tests.pyanaconda_tests.network_test.NetworkIfcfgTests) ... ok
update_hostname_data_test (tests.pyanaconda_tests.network_test.NetworkKSDataTests) ... ok
bond_options_ksdata_to_dbus_test (tests.pyanaconda_tests.network_test.NetworkTests) ... ok
default_ks_vlan_interface_name_test (tests.pyanaconda_tests.network_test.NetworkTests) ... ok
nm_check_ip_address_test (tests.pyanaconda_tests.network_test.NetworkTests) ... ok
nm_ks_spec_to_device_name_test (tests.pyanaconda_tests.network_test.NetworkTests) ... ok
prefix2netmask2prefix_test (tests.pyanaconda_tests.network_test.NetworkTests) ... ok
sanityCheckHostname_test (tests.pyanaconda_tests.network_test.NetworkTests) ... ok
ipv4_address_convert_test (tests.pyanaconda_tests.nm_test.UtilityFunctionsTests) ... ok
ipv6_address_convert_test (tests.pyanaconda_tests.nm_test.UtilityFunctionsTests) ... ok
comment_test (tests.pyanaconda_tests.simpleconfig_test.SimpleConfigTests) ... ok
no_use_tmp_test (tests.pyanaconda_tests.simpleconfig_test.SimpleConfigTests) ... ok
quote_test (tests.pyanaconda_tests.simpleconfig_test.SimpleConfigTests) ... ok
read_test (tests.pyanaconda_tests.simpleconfig_test.SimpleConfigTests) ... ok
read_write_test (tests.pyanaconda_tests.simpleconfig_test.SimpleConfigTests) ... ok
remove_key_test (tests.pyanaconda_tests.simpleconfig_test.SimpleConfigTests) ... ok
Setting and getting values ... ok
unquote_test (tests.pyanaconda_tests.simpleconfig_test.SimpleConfigTests) ... ok
unset_test (tests.pyanaconda_tests.simpleconfig_test.SimpleConfigTests) ... ok
use_tmp_multifs_test (tests.pyanaconda_tests.simpleconfig_test.SimpleConfigTests) ... ok
use_tmp_test (tests.pyanaconda_tests.simpleconfig_test.SimpleConfigTests) ... ok
write_new_keys_test (tests.pyanaconda_tests.simpleconfig_test.SimpleConfigTests) ... ok
write_test (tests.pyanaconda_tests.simpleconfig_test.SimpleConfigTests) ... ok
append_test (tests.pyanaconda_tests.simpleconfig_test.SimpleReplaceTests) ... ok
no_append_test (tests.pyanaconda_tests.simpleconfig_test.SimpleReplaceTests) ... ok
replace_test (tests.pyanaconda_tests.simpleconfig_test.SimpleReplaceTests) ... ok
Check if None is return for an invalid territory. ... ok
Check if the returned value is string for a valid territory. ... ok
Check if all returned timezones are considered valid timezones. ... ok
Check if returned timezones are plain strings, not unicode objects. ... ok
Check that save_hw_clock does nothing on s390. ... ok
Check that time_initialize doesn't call hwclock on s390. ... ok
Create a group that already exists. ... SKIP: user creation must be run as root
Create a group with a GID that already exists. ... SKIP: user creation must be run as root
Create a group with a specific GID. ... SKIP: user creation must be run as root
Create a group. ... SKIP: user creation must be run as root
Create a user with a specific password algorithm. ... SKIP: user creation must be run as root
Create a user that already exists. ... SKIP: user creation must be run as root
Create a user with a GID of an existing group. ... SKIP: user creation must be run as root
Create a user with a GID equal to that of one of the requested groups ... SKIP: user creation must be run as root
Create a user with a specific GID. ... SKIP: user creation must be run as root
Create a user with a bad list of groups. ... SKIP: user creation must be run as root
Create a user with a list of groups. ... SKIP: user creation must be run as root
Create a locked user account. ... SKIP: user creation must be run as root
Create a user with a password. ... SKIP: user creation must be run as root
create_user_reuse_home_test (tests.pyanaconda_tests.user_create_test.UserCreateTest) ... SKIP: user creation must be run as root
Create a user. ... SKIP: user creation must be run as root
Create a user with the text fields set. ... SKIP: user creation must be run as root
Create a user with a UID that already exists. ... SKIP: user creation must be run as root
Create a user with a specific UID. ... SKIP: user creation must be run as root
set_root_password_test (tests.pyanaconda_tests.user_create_test.UserCreateTest) ... SKIP: user creation must be run as root
set_user_ssh_key_test (tests.pyanaconda_tests.user_create_test.UserCreateTest) ... SKIP: user creation must be run as root
Test a list of possible group-name (GID) values with the group ... ok
hostname_test (tests.regex_tests.hostname_test.HostnameRegexTestCase) ... ok
ipv4_test (tests.regex_tests.hostname_test.IPv4RegexTestCase) ... ok
ipv6_test (tests.regex_tests.hostname_test.IPv6RegexTestCase) ... ok
euiname_test (tests.regex_tests.iscsi_name_test.iSCSIeuinameRegexTestCase) ... ok
iqnname_test (tests.regex_tests.iscsi_name_test.iSCSIiqnnameRegexTestCase) ... ok
reponame_test (tests.regex_tests.repo_name_test.RepoNameTestCase) ... ok
Run a list of possible URL values through the regex and check for ... ok
Test a list of possible Full Name values. ... ok
grouplist_simple_test (tests.regex_tests.username_test.UsernameRegexTestCase) ... ok
Test a list of possible username values. ... ok

----------------------------------------------------------------------
Ran 204 tests in 11.386s

OK (SKIP=20)
PASS nosetests.sh (exit status: 0)
